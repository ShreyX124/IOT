#include <WiFi.h>
#include <ThingSpeak.h>

char ssid[] = "leo";
char pass[] = "honey046";
WiFiClient client;
unsigned long myChannelNumber = 2661603;
const char *myWriteAPIKey = "BVL8EOTPKLPT2I9A";
const int motor1input1 = 0; // Input 1
const int motor1input2 = 2; // Input 2
const int motorEnable = 15;  // Enable pin (PWM pin)
unsigned long myTalkBackID = 53131;
const char *myTalkBackKey = "4LCU1GTK8XK53GXM";

int statusCode;

void setup() {
    Serial.begin(115200);
    WiFi.mode(WIFI_STA);
    ThingSpeak.begin(client);
    pinMode(34, INPUT);
    pinMode(motor1input1, OUTPUT);
    pinMode(motor1input2, OUTPUT);
    pinMode(motorEnable, OUTPUT);
    digitalWrite(motor1input1, HIGH);
    digitalWrite(motor1input2, HIGH);
    digitalWrite(motorEnable, LOW); // Disable the motor
}

void loop() {
    int q = analogRead(34);
    Serial.println(q);
    Serial.println("-----------");

    if (WiFi.status() != WL_CONNECTED) {
        Serial.print("Attempting to connect");
        WiFi.begin(ssid, pass);
        while (WiFi.status() != WL_CONNECTED) {
            Serial.print(".");
            delay(5000);
        }
        Serial.println("\nConnected.");
    }

    String tbURI = String("/talkbacks/") + String(myTalkBackID) + String("/commands/execute");
    String postMessage = String("api_key=") + String(myTalkBackKey);
    String newCommand;
    int x = httpPOST(tbURI, postMessage, newCommand);
    client.stop();

    // Check the result
    if (x == 200) {
        Serial.println("Checking queue...");
        if (newCommand.indexOf("on") == -1 && newCommand.indexOf("off") == -1) {
            Serial.println("No command or syntax error!");
        } else {
            if (newCommand.indexOf("on") != -1) {
                for (int speed = 0; speed <= 255; speed += 15) {
                    analogWrite(motorEnable, speed);
                    digitalWrite(motor1input1, LOW);
                    digitalWrite(motor1input2, HIGH);
                    delay(1000); // Run for 1 second
                }
            } else { // Assuming this is for "off"
                digitalWrite(motor1input1, HIGH);
                digitalWrite(motor1input2, HIGH);
                digitalWrite(motorEnable, LOW); // Disable the motor
            }
        }
    } else {
        Serial.println("Problem checking queue. HTTP error code " + String(x));
    }

    // Update ThingSpeak
    ThingSpeak.setField(4, x);
    statusCode = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
    if (statusCode == 200) {
        Serial.println("Channel update successful.");
    } else {
        Serial.println("Problem Writing data. HTTP error code :" + String(statusCode));
    }
    
    delay(15000); // Avoid blocking other parts
}

int httpPOST(String uri, String postMessage, String &response) {
    if (!client.connect("api.thingspeak.com", 80)) {
        return -301;   
    }

    postMessage += "&headers=false";
    String Headers = String("POST ") + uri + String(" HTTP/1.1\r\n") +
                     String("Host: api.thingspeak.com\r\n") +
                     String("Content-Type: application/x-www-form-urlencoded\r\n") +
                     String("Connection: close\r\n") +
                     String("Content-Length: ") + String(postMessage.length()) +
                     String("\r\n\r\n");

    client.print(Headers);
    client.print(postMessage);

    long startWaitForResponseAt = millis();
    while (client.available() == 0 && millis() - startWaitForResponseAt < 5000) {
        delay(100);
    }

    if (client.available() == 0) {       
        return -304; // Didn't get server response in time
    }

    if (!client.find("HTTP/1.1")) {
        return -303; // Couldn't parse response (didn't find HTTP/1.1)
    }

    int status = client.parseInt();
    if (status != 200) {
        return status;
    }

    if (!client.find("\n\r\n")) {
        return -303;
    }

    response = client.readString();
    return status;
}
\